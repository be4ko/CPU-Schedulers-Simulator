import SRTF.SRTFProcess;
import SRTF.SRTFSchedule;
import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class SRTF_GUI extends JFrame {

    private List<SRTFProcess> processes = new ArrayList<>();
    private List<SRTFProcess> executionOrder = new ArrayList<>();

    public SRTF_GUI() {
        // Initialize processes
        processes.add(new SRTFProcess("P1", "Red", 0, 7));
        processes.add(new SRTFProcess("P2", "Blue", 2, 4));
        processes.add(new SRTFProcess("P3", "Green", 4, 1));
        processes.add(new SRTFProcess("P4", "Yellow", 5, 4));

        // Create an instance of SRTFSchedule and use it to calculate the scheduling
        SRTFSchedule scheduler = new SRTFSchedule();
        scheduler.simulateSRTF(processes, 1); // context switching time = 1

        // Execution order and results are generated by the SRTFSchedule class
        executionOrder = scheduler.getExecutionOrder();  // Get the execution order from the scheduler

        // Set up JFrame
        setTitle("SRTF CPU Scheduling");
        setSize(1000, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Add components
        add(createGraphPanel(), BorderLayout.CENTER);
    }

    private JPanel createGraphPanel() {
        JPanel graphPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                int x = 50;
                int y = 50;
                int barHeight = 30;
                int gap = 5;

                for (SRTFProcess process : executionOrder) {
                    switch (process.process.color) {
                        case "Red" -> g.setColor(Color.RED);
                        case "Blue" -> g.setColor(Color.BLUE);
                        case "Green" -> g.setColor(Color.GREEN);
                        case "Yellow" -> g.setColor(Color.YELLOW);
                        default -> g.setColor(Color.GRAY);
                    }

                    int barWidth = process.process.burstTime * 10; // Adjust width based on burst time
                    g.fillRect(x, y, barWidth, barHeight);

                    g.setColor(Color.BLACK);
                    g.drawString(process.process.name, x + 5, y + 20); // Label the process

                    // Move to the next position
                    x += barWidth + gap;
                }
            }
        };

        graphPanel.setPreferredSize(new Dimension(800, 400));
        graphPanel.setBackground(Color.LIGHT_GRAY);
        return graphPanel;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            SRTF_GUI gui = new SRTF_GUI();
            gui.setVisible(true);
        });
    }
}
